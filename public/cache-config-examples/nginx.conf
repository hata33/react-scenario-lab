# Nginx 缓存配置示例
# 用于配合前端缓存系统的静态资源缓存优化

worker_processes auto;
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # 缓存路径配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g
                     inactive=60m use_temp_path=off;

    # 上游服务器配置
    upstream backend {
        server 127.0.0.1:3001;  # Next.js 应用服务器
        keepalive 32;
    }

    # 主服务器配置
    server {
        listen 80;
        server_name your-domain.com;
        root /var/www/html;
        index index.html;

        # 静态资源缓存 - 长期缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC";

            # 文件不存在时回退到应用服务器
            try_files $uri @backend;
        }

        # HTML 文件缓存 - 短期缓存
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header X-Cache-Status "HTML";
        }

        # API 路由 - 不缓存或极短缓存
        location /api/ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header X-Cache-Status "API-DYNAMIC";

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # 公共 API（可缓存）
        location /api/public/ {
            # 缓存 5 分钟
            proxy_cache my_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;

            add_header X-Cache-Status $upstream_cache_status;
            add_header Cache-Control "public, max-age=300";

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 图片和媒体文件
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
            expires 30d;
            add_header Cache-Control "public";
            add_header X-Cache-Status "MEDIA";

            # 尝试静态文件，否则代理到后端
            try_files $uri @backend;
        }

        # 视频文件
        location ~* \.(mp4|webm|ogg)$ {
            expires 7d;
            add_header Cache-Control "public";
            add_header X-Cache-Status "VIDEO";

            # 支持范围请求
            add_header Accept-Ranges bytes;

            try_files $uri @backend;
        }

        # 字体文件
        location ~* \.(woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "FONT";
            add_header Access-Control-Allow-Origin "*";

            try_files $uri @backend;
        }

        # 清除缓存的特殊路径
        location /purge-cache/ {
            allow 127.0.0.1;  # 只允许本地访问
            deny all;
            proxy_cache_purge my_cache $scheme$proxy_host$request_uri;
        }

        # 后端回退
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # 防止缓存动态页面
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Next.js 静态资源
        location /_next/static/ {
            proxy_pass http://backend;
            proxy_cache_valid 200 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "NEXT-STATIC";
        }

        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS 配置（生产环境）
    server {
        listen 443 ssl http2;
        server_name your-domain.com;

        # SSL 证书配置
        ssl_certificate /path/to/your/certificate.crt;
        ssl_certificate_key /path/to/your/private.key;

        # SSL 安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # 其他配置与 HTTP 相同...
        # (复制上面的 location 配置)
    }

    # HTTP 重定向到 HTTPS
    server {
        listen 80;
        server_name your-domain.com;
        return 301 https://$server_name$request_uri;
    }
}