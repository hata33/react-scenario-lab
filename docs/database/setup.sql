-- ====================================================================
-- React Scenario Lab - Supabase 数据库设置脚本
-- ====================================================================
-- 版本: 1.0.0
-- 创建日期: 2025-10-19
-- 说明: 一键设置 todos 表和相关安全策略
-- ====================================================================

-- 1. 创建 todos 表
CREATE TABLE IF NOT EXISTS todos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    is_complete BOOLEAN DEFAULT FALSE,
    priority INTEGER DEFAULT 1 CHECK (priority >= 1 AND priority <= 5),
    due_date TIMESTAMP WITH TIME ZONE,
    tags TEXT[] DEFAULT '{}'
);

-- 2. 创建索引以提高查询性能
CREATE INDEX IF NOT EXISTS idx_todos_user_id ON todos(user_id);
CREATE INDEX IF NOT EXISTS idx_todos_created_at ON todos(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_todos_is_complete ON todos(is_complete);
CREATE INDEX IF NOT EXISTS idx_todos_priority ON todos(priority);
CREATE INDEX IF NOT EXISTS idx_todos_due_date ON todos(due_date);
CREATE INDEX IF NOT EXISTS idx_todos_tags ON todos USING GIN(tags);

-- 3. 启用行级安全策略 (RLS)
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- 4. 删除已存在的策略（如果需要重新创建）
DROP POLICY IF EXISTS "Users can view their own todos" ON todos;
DROP POLICY IF EXISTS "Users can insert their own todos" ON todos;
DROP POLICY IF EXISTS "Users can update their own todos" ON todos;
DROP POLICY IF EXISTS "Users can delete their own todos" ON todos;

-- 5. 创建安全策略：用户只能操作自己的 todos
CREATE POLICY "Users can view their own todos" ON todos
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own todos" ON todos
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own todos" ON todos
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own todos" ON todos
    FOR DELETE USING (auth.uid() = user_id);

-- 6. 创建自动更新 updated_at 字段的函数（如果不存在）
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 7. 创建触发器（如果不存在）
DROP TRIGGER IF EXISTS handle_todos_updated_at ON todos;
CREATE TRIGGER handle_todos_updated_at
    BEFORE UPDATE ON todos
    FOR EACH ROW
    EXECUTE FUNCTION handle_updated_at();

-- ====================================================================
-- 设置完成！
-- ====================================================================

-- 验证设置
SELECT 'todos 表创建成功' as status;

-- 检查表结构
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'todos'
ORDER BY ordinal_position;

-- 检查安全策略
SELECT policyname, permissive, roles, cmd
FROM pg_policies
WHERE tablename = 'todos';

-- 检查索引
SELECT indexname, indexdef
FROM pg_indexes
WHERE tablename = 'todos';

-- ====================================================================
-- 使用说明：
-- 1. 在 Supabase 控制台的 SQL 编辑器中运行此脚本
-- 2. 确保环境变量已正确配置
-- 3. 重启应用使更改生效
-- ====================================================================